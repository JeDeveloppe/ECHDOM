{% extends 'site/base.html.twig' %}

{% block title %}Mon Tableau de Bord - Proximité{% endblock %}

{% block nav %}
   {% include "site/user/_nav_user.html.twig" %}
{% endblock %}

{% block body %}
    <div class="container my-5 pt-5">
        <div class="row mb-4 pt-5">
            <div class="col-12 text-center">
                <h1 class="fw-bold text-primary display-4">Mon tableau de bord</h1>
                <p class="lead text-muted">Bienvenue, {{ app.user.firstname }} ! Gérez votre propriété et vos échanges en un coup d'œil.</p>
            </div>
        </div>

        <div class="row g-4">
            <!-- Section Lieu de travail -->
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm border-0 rounded-4 p-3 bg-light">
                    <div class="card-body d-flex flex-column align-items-center text-center">
                        <div class="bg-primary-subtle text-primary p-3 rounded-circle mb-3">
                            <i class="fa-solid fa-building-user fa-2x"></i>
                        </div>
                        <h5 class="card-title fw-semibold text-dark mb-2">Lieu de travail</h5>
                        <!-- Conteneur pour les messages de retour -->
                        <div id="workplace-message" class="w-100 mb-2"></div>
                        
                        <div class="w-100 mt-2">
                            {{ form_start(workplaceForm, {'attr': {'class': 'd-flex flex-column align-items-stretch', 'id': 'workplaceForm'}}) }}
                                <p class="card-text text-muted mb-3" id="workplaceAddress">{{ app.user.workplaces.first.address|default('Non renseigné') }}</p>
                                <div class="position-relative w-100 mb-3">
                                    {# Le champ d'adresse utilise le placeholder, l'ancienne adresse est affichée dans le paragraphe ci-dessus #}
                                    {{ form_row(workplaceForm.address, {'label': false, 'attr': {'id': 'user_workplace_choice_address', 'class': 'form-control rounded-pill', 'placeholder': 'Nouvelle adresse...', 'autocomplete': 'off'}}) }}
                                    <!-- Conteneur pour les résultats de l'autocomplétion -->
                                    <div id="autocomplete-results" class="position-absolute w-100 bg-white border border-top-0 rounded-bottom-3 shadow-sm z-3 overflow-y-auto" style="max-height: 200px; display: none; z-index: 100;"></div>
                                </div>
                                {# Les champs latitude et longitude sont inclus dans le formulaire pour une soumission correcte #}
                                {{ form_row(workplaceForm.latitude, {'attr': {'id': 'user_workplace_choice_latitude'}}) }}
                                {{ form_row(workplaceForm.longitude, {'attr': {'id': 'user_workplace_choice_longitude'}}) }}
                                {{ form_row(workplaceForm._token) }}

                                <button type="submit" class="btn btn-sm btn-outline-primary rounded-pill mt-3" id="saveButton" style="z-index: 101; display: none;">
                                    <i class="fa-solid fa-save me-2" id="saveIcon"></i>
                                    <i class="fa-solid fa-spinner fa-spin me-2" id="loadingIcon" style="display: none;"></i>
                                    <span id="buttonText">Enregistrer</span>
                                </button>
                            {{ form_end(workplaceForm) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section Bien en échange -->
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm border-0 rounded-4 p-3 bg-light">
                    <div class="card-body d-flex flex-column align-items-center text-center">
                        <div class="bg-primary-subtle text-primary p-3 rounded-circle mb-3">
                            <i class="fa-solid fa-house-chimney-user fa-2x"></i>
                        </div>
                        <h5 class="card-title fw-semibold text-dark mb-2">Mon bien en échange</h5>
                        {% if app.user.homes is not empty %}
                            <p class="card-text text-muted mb-0">{{ app.user.homes.first.address }}</p>
                            <a href="{{ path('user_my_property_in_exchange') }}" class="btn btn-sm btn-outline-primary rounded-pill mt-2">Voir les détails</a>
                        {% else %}
                            <p class="card-text text-muted fst-italic">Aucun bien proposé</p>
                            <a href="{{ path('user_my_property_in_exchange') }}" class="btn btn-sm btn-outline-primary rounded-pill mt-2">Proposer un bien</a>
                        {% endif %}
                    </div>
                </div>
            </div>

            <!-- Section Notation -->
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm border-0 rounded-4 p-3 bg-light">
                    <div class="card-body d-flex flex-column align-items-center text-center">
                        <div class="bg-primary-subtle text-primary p-3 rounded-circle mb-3">
                            <i class="fa-solid fa-star fa-2x"></i>
                        </div>
                        <h5 class="card-title fw-semibold text-dark mb-2">Ma notation</h5>
                        {% if user.rating is defined and user.rating is not null %}
                            <p class="card-text text-muted mb-0">
                                {% for i in 1..5 %}
                                    <i class="fa-solid fa-star {% if i <= user.rating %}text-warning{% else %}text-muted{% endif %}"></i>
                                {% endfor %}
                            </p>
                            <span class="badge bg-secondary-subtle text-secondary-emphasis rounded-pill px-3 py-2 mt-2">{{ user.rating }}/5</span>
                        {% else %}
                            <p class="card-text text-muted fst-italic">Pas encore de notation</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <hr class="my-5">
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // S'assurer que les éléments sont bien chargés avant de les sélectionner
            const form = document.getElementById('workplaceForm');
            const addressInput = document.getElementById('user_workplace_choice_address');
            // Mettre à jour les sélecteurs pour correspondre aux ID générés par Symfony
            const latitudeInput = document.getElementById('user_workplace_choice_latitude');
            const longitudeInput = document.getElementById('user_workplace_choice_longitude');
            const csrfInput = document.getElementById('user_workplace_choice__token');
            const addressDisplay = document.getElementById('workplaceAddress');
            const messageContainer = document.getElementById('workplace-message');
            const resultsContainer = document.getElementById('autocomplete-results');
            const saveButton = document.getElementById('saveButton');
            const buttonText = document.getElementById('buttonText');
            const saveIcon = document.getElementById('saveIcon');
            const loadingIcon = document.getElementById('loadingIcon');

            // Effacer le champ d'entrée au chargement de la page pour afficher le placeholder
            addressInput.value = '';

            // Vérifier si les éléments existent avant de continuer
            if (!form || !addressInput) {
                console.error("Erreur : Le formulaire ou le champ d'adresse n'a pas été trouvé.");
                return;
            }

            let debounceTimeout;

            // Fonction pour gérer la recherche d'adresse
            const searchAddress = async (query) => {
                if (query.length < 3) {
                    resultsContainer.style.display = 'none';
                    return;
                }

                try {
                    const response = await fetch('/user/api/geocode?q=' + encodeURIComponent(query));
                    if (!response.ok) {
                        throw new Error('Erreur de l\'API de géocodage');
                    }
                    const data = await response.json();
                    displayResults(data);
                } catch (error) {
                    console.error('Erreur lors de la recherche d\'adresse:', error);
                    resultsContainer.style.display = 'none';
                }
            };

            // Fonction pour afficher les résultats de l'autocomplétion
            const displayResults = (results) => {
                if (!resultsContainer) return;

                resultsContainer.innerHTML = '';
                if (results.length > 0) {
                    resultsContainer.style.display = 'block';
                    results.forEach(result => {
                        const suggestion = document.createElement('div');
                        suggestion.classList.add('p-2', 'text-start', 'cursor-pointer', 'text-dark');
                        suggestion.textContent = result.label;
                        
                        // Stocker les données directement sur l'élément de suggestion
                        suggestion.dataset.latitude = result.latitude;
                        suggestion.dataset.longitude = result.longitude;

                        // Ajoute un écouteur d'événement pour le clic sur une suggestion
                        suggestion.addEventListener('click', (e) => {
                            e.stopPropagation();

                            addressInput.value = result.label;
                            // Mettre à jour la valeur des champs cachés
                            latitudeInput.value = suggestion.dataset.latitude;
                            longitudeInput.value = suggestion.dataset.longitude;
                            
                            resultsContainer.style.display = 'none';
                            toggleSaveButton(); // Appelle la fonction pour afficher le bouton
                        });

                        // Ajoute les classes de style au survol
                        suggestion.addEventListener('mouseenter', () => suggestion.classList.add('bg-light'));
                        suggestion.addEventListener('mouseleave', () => suggestion.classList.remove('bg-light'));

                        resultsContainer.appendChild(suggestion);
                    });
                } else {
                    resultsContainer.style.display = 'none';
                }
            };

            // Fonction pour afficher ou cacher le bouton de sauvegarde
            const toggleSaveButton = () => {
                if (latitudeInput.value && longitudeInput.value) {
                    saveButton.style.display = 'block';
                } else {
                    saveButton.style.display = 'none';
                }
            };

            // Écouteur d'événement pour l'entrée utilisateur (avec debounce)
            addressInput.addEventListener('input', () => {
                clearTimeout(debounceTimeout);
                // Efface les champs latitude/longitude dès que l'utilisateur commence à taper
                latitudeInput.value = '';
                longitudeInput.value = '';
                toggleSaveButton(); // Cache le bouton dès que l'utilisateur commence à taper
                debounceTimeout = setTimeout(() => {
                    searchAddress(addressInput.value);
                }, 300);
            });
            
            // Masquer les résultats lorsque l'utilisateur clique en dehors
            document.addEventListener('click', (e) => {
                if (!resultsContainer.contains(e.target) && e.target !== addressInput) {
                    resultsContainer.style.display = 'none';
                }
            });
            
            // Gère la soumission du formulaire
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                messageContainer.innerHTML = '';

                if (!latitudeInput.value || !longitudeInput.value) {
                    messageContainer.innerHTML = `
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            Veuillez sélectionner une adresse dans la liste de suggestions.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
                    return;
                }
                
                showLoadingState();

                try {
                    const response = await fetch('/user/api/workplace/update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            address: addressInput.value,
                            latitude: latitudeInput.value,
                            longitude: longitudeInput.value,
                            _token: csrfInput.value // Ajout du jeton CSRF
                        })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        addressDisplay.textContent = result.address;
                        messageContainer.innerHTML = `
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                Adresse mise à jour avec succès !
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `;
                        // Efface l'input, la latitude et la longitude pour cacher le bouton
                        addressInput.value = '';
                        latitudeInput.value = '';
                        longitudeInput.value = '';
                        toggleSaveButton();

                    } else {
                        messageContainer.innerHTML = `
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                Erreur : ${result.error || 'Une erreur inconnue est survenue.'}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `;
                        console.error('Erreur de soumission:', result.error);
                    }
                } catch (error) {
                    messageContainer.innerHTML = `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            Erreur réseau. Veuillez réessayer.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
                    console.error('Erreur réseau ou du serveur:', error);
                } finally {
                    hideLoadingState();
                }
            });

            // Fonctions pour gérer l'état de chargement du bouton
            const showLoadingState = () => {
                saveButton.disabled = true;
                saveIcon.style.display = 'none';
                loadingIcon.style.display = 'inline-block';
                buttonText.textContent = 'Enregistrement...';
            };

            const hideLoadingState = () => {
                saveButton.disabled = false;
                saveIcon.style.display = 'inline-block';
                loadingIcon.style.display = 'none';
                buttonText.textContent = 'Enregistrer';
            };
        });
    </script>
{% endblock %}
